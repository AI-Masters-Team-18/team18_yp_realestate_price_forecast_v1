import os
import pandas as pd
import joblib
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

(
    ASKING_DISTANCE,
    ASKING_ROOMS,
    ASKING_AREA,
    ASKING_FLOOR,
    ASKING_REPAIR,
    ASKING_YEAR,
    ASKING_CEILING,
    ASKING_WALLS,
    ASKING_TYPE,
    ASKING_STATION,
    ASKING_TIME,
) = range(11)

user_data = {}


async def ask_distance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    try:
        distance = float(text)
        user_data[user_id]["–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞"] = distance if distance != 0 else None

        keyboard = [["0", "1", "2"], ["3", "4", "5+"], ["free", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(reply_markup=reply_markup)
        return ASKING_ROOMS

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return ASKING_DISTANCE


async def ask_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç"] = None
    else:
        user_data[user_id]["–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç"] = text

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–≤ –∫–≤.–º).\n" "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASKING_AREA


async def ask_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    try:
        area = float(text)
        user_data[user_id]["–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å"] = area if area != 0 else None

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —ç—Ç–∞–∂.\n" "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
        )
        return ASKING_FLOOR

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return ASKING_AREA


async def ask_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    try:
        floor = int(text)
        user_data[user_id]["–≠—Ç–∞–∂"] = floor if floor != 0 else None

        keyboard = [
            ["–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç", "–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏"],
            ["–•–æ—Ä–æ—à–∏–π", "–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π"],
            ["–ï–≤—Ä–æ", "–ß–∏—Å—Ç–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞"],
            ["–ß–µ—Ä–Ω–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞", "–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞"],
            ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=reply_markup
        )
        return ASKING_REPAIR

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return ASKING_FLOOR


async def ask_repair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["–†–µ–º–æ–Ω—Ç"] = None
    else:
        user_data[user_id]["–†–µ–º–æ–Ω—Ç"] = text

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏.\n" "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASKING_YEAR


async def ask_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    try:
        year = int(text)
        user_data[user_id]["–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏"] = year if year != 0 else None

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–æ–≤ (–≤ –º–µ—Ç—Ä–∞—Ö).\n" "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
        )
        return ASKING_CEILING

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return ASKING_YEAR


async def ask_ceiling(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    try:
        ceiling = float(text)
        user_data[user_id]["–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤"] = ceiling if ceiling != 0 else None

        keyboard = [
            ["–º–æ–Ω–æ–ª–∏—Ç", "–∫–∏—Ä–ø–∏—á"],
            ["–ø–∞–Ω–µ–ª—å", "–∫–∏—Ä–ø–∏—á-–º–æ–Ω–æ–ª–∏—Ç"],
            ["–±–ª–æ–∫", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:", reply_markup=reply_markup
        )
        return ASKING_WALLS

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return ASKING_CEILING


async def ask_walls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω"] = None
    else:
        user_data[user_id]["–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω"] = text

    keyboard = [["–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã"], ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:", reply_markup=reply_markup)
    return ASKING_TYPE


async def ask_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["–¢–∏–ø –∂–∏–ª—å—è"] = None
    else:
        user_data[user_id]["–¢–∏–ø –∂–∏–ª—å—è"] = text

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ.\n" "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASKING_STATION


async def ask_station(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "0":
        user_data[user_id]["–°—Ç–∞–Ω—Ü–∏—è"] = None
    else:
        user_data[user_id]["–°—Ç–∞–Ω—Ü–∏—è"] = text

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (–≤ –º–∏–Ω—É—Ç–∞—Ö).\n" "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )
    return ASKING_TIME


async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    try:
        time = int(text)
        user_data[user_id]["–í—Ä–µ–º—è"] = time if time != 0 else None

        model_path = os.path.join("model", "model.pkl")

        if os.path.exists(model_path):
            try:
                model = joblib.load(model_path)

                user_df = pd.DataFrame([user_data[user_id]])

                prediction = model.predict(user_df)[0]

                result = "üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**\n\n"
                result += f"üí∞ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {prediction:,.0f} —Ä—É–±.**\n\n"
                result += "üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"

                for key, value in user_data[user_id].items():
                    if value is not None:
                        result += f"‚Ä¢ {key}: {value}\n"

                await update.message.reply_text(result, parse_mode="Markdown")

            except Exception as e:
                result = "üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                for key, value in user_data[user_id].items():
                    if value is not None:
                        result += f"‚Ä¢ {key}: {value}\n"

                result += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {str(e)}"
                await update.message.reply_text(result)
        else:
            result = "üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            for key, value in user_data[user_id].items():
                if value is not None:
                    result += f"‚Ä¢ {key}: {value}\n"

            result += "\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å."
            await update.message.reply_text(result)

        del user_data[user_id]

        from handlers.menu_handler import show_main_menu

        await show_main_menu(update)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return ASKING_TIME
